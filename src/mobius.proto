syntax = "proto3";
package mobius.proto;

message rgb {
  float r = 1;
  float g = 2;
  float b = 3;
}

message vec3 {
  float x = 1;
  float y = 2;
  float z = 3;
}

message tri {
  uint32 a = 1;
  uint32 b = 2;
  uint32 c = 3;
}

message quad {
  uint32 a = 1;
  uint32 b = 2;
  uint32 c = 3;
  uint32 d = 4;
}

message material {
  float hue = 1;
  float hue_shift = 2;
}

message geometry {
  repeated uint32 point = 1;
  repeated tri tri = 2;
  repeated quad quad = 3;
}

message submesh {
  enum flag {
    NONE = 0;
    PHYSICAL = 1;
    VISIBLE = 2;
  }

  uint32 flags = 1;
  material material = 2;
  uint32 geometry = 3;
  vec3 scale = 4;
  vec3 translate = 5;
}

message mesh {
  repeated vec3 vertex = 1;
  repeated geometry geometry = 2;
  repeated submesh submesh = 3;
}

message orientation {
  // Relative origin point.
  vec3 origin = 1;
  // Normal should point into the chunk.
  vec3 normal = 2;
  // Relative up-vector.
  vec3 up = 3;
}

message portal {
  // Name of the remote chunk that the portal leads to.
  string chunk_name = 1;
  // Identifiers should match the portal identifier on the remote chunk. They
  // are unique per chunk-pair. This is used only to avoid re-rendering to the
  // maximum limit when both portal meshes are visible.
  uint32 portal_id = 2;

  // The physical parts of this mesh cause chunk handover; the remote space is
  // rendered onto the visible parts.
  mesh portal_mesh = 3;

  // Local and remote relative orientations for rendering and handover. The
  // chunk spaces identify the two origin points and orient each space relative
  // to the normal. Note that everything in the remote space which lies in front
  // of the local origin will be clipped when rendered onto the portal mesh.
  orientation local = 4;
  orientation remote = 5;
}

message chunk {
  // Name referenced by portals.
  string name = 1;
  // Static chunk geometry.
  mesh mesh = 2;
  // List of portals.
  repeated portal portal = 3;
}

message world {
  repeated chunk chunk = 1;
}
